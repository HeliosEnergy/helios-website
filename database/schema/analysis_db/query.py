# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.28.0
# source: query.sql
import datetime
from typing import AsyncIterator, Iterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from analysis_db import models


CREATE_METRIC = """-- name: create_metric \\:one
INSERT INTO metrics (
    name,
    value,
    timestamp
) VALUES (
    :p1, :p2, :p3
) RETURNING id, name, value, timestamp
"""


DELETE_METRIC = """-- name: delete_metric \\:exec
DELETE FROM metrics
WHERE id = :p1
"""


GET_METRIC = """-- name: get_metric \\:one
SELECT id, name, value, timestamp FROM metrics
WHERE id = :p1
"""


GET_METRICS_BY_TIME_RANGE = """-- name: get_metrics_by_time_range \\:many
SELECT id, name, value, timestamp FROM metrics
WHERE timestamp BETWEEN :p1 AND :p2
ORDER BY timestamp DESC
"""


LIST_METRICS = """-- name: list_metrics \\:many
SELECT id, name, value, timestamp FROM metrics
ORDER BY timestamp DESC
LIMIT :p1 OFFSET :p2
"""


UPDATE_METRIC_VALUE = """-- name: update_metric_value \\:one
UPDATE metrics
SET value = :p2
WHERE id = :p1
RETURNING id, name, value, timestamp
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_metric(self, *, name: str, value: float, timestamp: Optional[datetime.datetime]) -> Optional[models.Metric]:
        row = self._conn.execute(sqlalchemy.text(CREATE_METRIC), {"p1": name, "p2": value, "p3": timestamp}).first()
        if row is None:
            return None
        return models.Metric(
            id=row[0],
            name=row[1],
            value=row[2],
            timestamp=row[3],
        )

    def delete_metric(self, *, id: int) -> None:
        self._conn.execute(sqlalchemy.text(DELETE_METRIC), {"p1": id})

    def get_metric(self, *, id: int) -> Optional[models.Metric]:
        row = self._conn.execute(sqlalchemy.text(GET_METRIC), {"p1": id}).first()
        if row is None:
            return None
        return models.Metric(
            id=row[0],
            name=row[1],
            value=row[2],
            timestamp=row[3],
        )

    def get_metrics_by_time_range(self, *, timestamp: Optional[datetime.datetime], timestamp: Optional[datetime.datetime]) -> Iterator[models.Metric]:
        result = self._conn.execute(sqlalchemy.text(GET_METRICS_BY_TIME_RANGE), {"p1": timestamp, "p2": timestamp})
        for row in result:
            yield models.Metric(
                id=row[0],
                name=row[1],
                value=row[2],
                timestamp=row[3],
            )

    def list_metrics(self, *, limit: int, offset: int) -> Iterator[models.Metric]:
        result = self._conn.execute(sqlalchemy.text(LIST_METRICS), {"p1": limit, "p2": offset})
        for row in result:
            yield models.Metric(
                id=row[0],
                name=row[1],
                value=row[2],
                timestamp=row[3],
            )

    def update_metric_value(self, *, id: int, value: float) -> Optional[models.Metric]:
        row = self._conn.execute(sqlalchemy.text(UPDATE_METRIC_VALUE), {"p1": id, "p2": value}).first()
        if row is None:
            return None
        return models.Metric(
            id=row[0],
            name=row[1],
            value=row[2],
            timestamp=row[3],
        )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_metric(self, *, name: str, value: float, timestamp: Optional[datetime.datetime]) -> Optional[models.Metric]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_METRIC), {"p1": name, "p2": value, "p3": timestamp})).first()
        if row is None:
            return None
        return models.Metric(
            id=row[0],
            name=row[1],
            value=row[2],
            timestamp=row[3],
        )

    async def delete_metric(self, *, id: int) -> None:
        await self._conn.execute(sqlalchemy.text(DELETE_METRIC), {"p1": id})

    async def get_metric(self, *, id: int) -> Optional[models.Metric]:
        row = (await self._conn.execute(sqlalchemy.text(GET_METRIC), {"p1": id})).first()
        if row is None:
            return None
        return models.Metric(
            id=row[0],
            name=row[1],
            value=row[2],
            timestamp=row[3],
        )

    async def get_metrics_by_time_range(self, *, timestamp: Optional[datetime.datetime], timestamp: Optional[datetime.datetime]) -> AsyncIterator[models.Metric]:
        result = await self._conn.stream(sqlalchemy.text(GET_METRICS_BY_TIME_RANGE), {"p1": timestamp, "p2": timestamp})
        async for row in result:
            yield models.Metric(
                id=row[0],
                name=row[1],
                value=row[2],
                timestamp=row[3],
            )

    async def list_metrics(self, *, limit: int, offset: int) -> AsyncIterator[models.Metric]:
        result = await self._conn.stream(sqlalchemy.text(LIST_METRICS), {"p1": limit, "p2": offset})
        async for row in result:
            yield models.Metric(
                id=row[0],
                name=row[1],
                value=row[2],
                timestamp=row[3],
            )

    async def update_metric_value(self, *, id: int, value: float) -> Optional[models.Metric]:
        row = (await self._conn.execute(sqlalchemy.text(UPDATE_METRIC_VALUE), {"p1": id, "p2": value})).first()
        if row is None:
            return None
        return models.Metric(
            id=row[0],
            name=row[1],
            value=row[2],
            timestamp=row[3],
        )
