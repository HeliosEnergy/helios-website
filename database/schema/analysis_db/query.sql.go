// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package analysis_db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEIAElectricityData = `-- name: CreateEIAElectricityData :exec
INSERT INTO eia_electricity_data (
    series_id,
    name,
    units,
    frequency,
    copyright,
    source,
    iso3166,
    location,
    geography,
    start_date,
    end_date,
    last_updated,
    data
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    ST_SetSRID(ST_MakePoint(
        $8::float8,
        $9::float8
    ), 4326)::geography,
    $10,
    $11,
    $12,
    $13,
    $14
)
`

type CreateEIAElectricityDataParams struct {
	SeriesID    string
	Name        string
	Units       string
	Frequency   pgtype.Text
	Copyright   pgtype.Text
	Source      pgtype.Text
	Iso3166     pgtype.Text
	Longitude   float64
	Latitude    float64
	Geography   pgtype.Text
	StartDate   pgtype.Timestamptz
	EndDate     pgtype.Timestamptz
	LastUpdated pgtype.Timestamptz
	Data        []byte
}

func (q *Queries) CreateEIAElectricityData(ctx context.Context, arg CreateEIAElectricityDataParams) error {
	_, err := q.db.Exec(ctx, createEIAElectricityData,
		arg.SeriesID,
		arg.Name,
		arg.Units,
		arg.Frequency,
		arg.Copyright,
		arg.Source,
		arg.Iso3166,
		arg.Longitude,
		arg.Latitude,
		arg.Geography,
		arg.StartDate,
		arg.EndDate,
		arg.LastUpdated,
		arg.Data,
	)
	return err
}

const createMetric = `-- name: CreateMetric :one
INSERT INTO metrics (
    name,
    value,
    timestamp
) VALUES (
    $1, $2, $3
) RETURNING id, name, value, timestamp
`

type CreateMetricParams struct {
	Name      string
	Value     float64
	Timestamp pgtype.Timestamptz
}

func (q *Queries) CreateMetric(ctx context.Context, arg CreateMetricParams) (Metric, error) {
	row := q.db.QueryRow(ctx, createMetric, arg.Name, arg.Value, arg.Timestamp)
	var i Metric
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.Timestamp,
	)
	return i, err
}

const deleteMetric = `-- name: DeleteMetric :exec
DELETE FROM metrics
WHERE id = $1
`

func (q *Queries) DeleteMetric(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteMetric, id)
	return err
}

const getMetric = `-- name: GetMetric :one
SELECT id, name, value, timestamp FROM metrics
WHERE id = $1
`

func (q *Queries) GetMetric(ctx context.Context, id int32) (Metric, error) {
	row := q.db.QueryRow(ctx, getMetric, id)
	var i Metric
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.Timestamp,
	)
	return i, err
}

const getMetricsByName = `-- name: GetMetricsByName :many
SELECT id, name, value, timestamp FROM metrics
WHERE name = $1
ORDER BY timestamp DESC
`

func (q *Queries) GetMetricsByName(ctx context.Context, name string) ([]Metric, error) {
	rows, err := q.db.Query(ctx, getMetricsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metric
	for rows.Next() {
		var i Metric
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMetricsByTimeRange = `-- name: GetMetricsByTimeRange :many
SELECT id, name, value, timestamp FROM metrics
WHERE timestamp BETWEEN $1 AND $2
ORDER BY timestamp DESC
`

type GetMetricsByTimeRangeParams struct {
	StartTimestamp pgtype.Timestamptz
	EndTimestamp   pgtype.Timestamptz
}

func (q *Queries) GetMetricsByTimeRange(ctx context.Context, arg GetMetricsByTimeRangeParams) ([]Metric, error) {
	rows, err := q.db.Query(ctx, getMetricsByTimeRange, arg.StartTimestamp, arg.EndTimestamp)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metric
	for rows.Next() {
		var i Metric
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMetrics = `-- name: ListMetrics :many
SELECT id, name, value, timestamp FROM metrics
ORDER BY timestamp DESC
`

func (q *Queries) ListMetrics(ctx context.Context) ([]Metric, error) {
	rows, err := q.db.Query(ctx, listMetrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metric
	for rows.Next() {
		var i Metric
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMetric = `-- name: UpdateMetric :one
UPDATE metrics
SET name = $2,
    value = $3,
    timestamp = $4
WHERE id = $1
RETURNING id, name, value, timestamp
`

type UpdateMetricParams struct {
	ID        int32
	Name      string
	Value     float64
	Timestamp pgtype.Timestamptz
}

func (q *Queries) UpdateMetric(ctx context.Context, arg UpdateMetricParams) (Metric, error) {
	row := q.db.QueryRow(ctx, updateMetric,
		arg.ID,
		arg.Name,
		arg.Value,
		arg.Timestamp,
	)
	var i Metric
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.Timestamp,
	)
	return i, err
}
