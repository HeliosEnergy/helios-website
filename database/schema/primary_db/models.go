// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package primary_db

import (
	"database/sql/driver"
	"fmt"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccountType string

const (
	AccountTypeEMPLOYEE  AccountType = "EMPLOYEE"
	AccountTypeFINANCIAL AccountType = "FINANCIAL"
	AccountTypeCUSTOMER  AccountType = "CUSTOMER"
	AccountTypeSUPPLIER  AccountType = "SUPPLIER"
	AccountTypeOTHER     AccountType = "OTHER"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType
	Valid       bool // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type GpuConfiguration string

const (
	GpuConfigurationRTX4090x1  GpuConfiguration = "RTX4090x1"
	GpuConfigurationRTX4090x2  GpuConfiguration = "RTX4090x2"
	GpuConfigurationRTX4090x4  GpuConfiguration = "RTX4090x4"
	GpuConfigurationRTX4090x8  GpuConfiguration = "RTX4090x8"
	GpuConfigurationRTX4090x16 GpuConfiguration = "RTX4090x16"
	GpuConfigurationA100x1     GpuConfiguration = "A100x1"
	GpuConfigurationA100x2     GpuConfiguration = "A100x2"
	GpuConfigurationA100x4     GpuConfiguration = "A100x4"
	GpuConfigurationA100x8     GpuConfiguration = "A100x8"
	GpuConfigurationA100x16    GpuConfiguration = "A100x16"
	GpuConfigurationH100x1     GpuConfiguration = "H100x1"
	GpuConfigurationH100x2     GpuConfiguration = "H100x2"
	GpuConfigurationH100x4     GpuConfiguration = "H100x4"
	GpuConfigurationH100x8     GpuConfiguration = "H100x8"
	GpuConfigurationH100x16    GpuConfiguration = "H100x16"
	GpuConfigurationNONE       GpuConfiguration = "NONE"
)

func (e *GpuConfiguration) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GpuConfiguration(s)
	case string:
		*e = GpuConfiguration(s)
	default:
		return fmt.Errorf("unsupported scan type for GpuConfiguration: %T", src)
	}
	return nil
}

type NullGpuConfiguration struct {
	GpuConfiguration GpuConfiguration
	Valid            bool // Valid is true if GpuConfiguration is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGpuConfiguration) Scan(value interface{}) error {
	if value == nil {
		ns.GpuConfiguration, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GpuConfiguration.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGpuConfiguration) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GpuConfiguration), nil
}

type MachineTaskType string

const (
	MachineTaskTypeSCRIPT            MachineTaskType = "SCRIPT"
	MachineTaskTypePYTHON            MachineTaskType = "PYTHON"
	MachineTaskTypeCONTAINER         MachineTaskType = "CONTAINER"
	MachineTaskTypeCLOUDMANAGEDAI    MachineTaskType = "CLOUD_MANAGED_AI"
	MachineTaskTypeCLOUDCONTAINER    MachineTaskType = "CLOUD_CONTAINER"
	MachineTaskTypeTHIRDPARTYSERVICE MachineTaskType = "THIRD_PARTY_SERVICE"
	MachineTaskTypeCRYPTOMINING      MachineTaskType = "CRYPTO_MINING"
	MachineTaskTypeOTHER             MachineTaskType = "OTHER"
)

func (e *MachineTaskType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MachineTaskType(s)
	case string:
		*e = MachineTaskType(s)
	default:
		return fmt.Errorf("unsupported scan type for MachineTaskType: %T", src)
	}
	return nil
}

type NullMachineTaskType struct {
	MachineTaskType MachineTaskType
	Valid           bool // Valid is true if MachineTaskType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMachineTaskType) Scan(value interface{}) error {
	if value == nil {
		ns.MachineTaskType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MachineTaskType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMachineTaskType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MachineTaskType), nil
}

type OsType string

const (
	OsTypeLINUX   OsType = "LINUX"
	OsTypeWINDOWS OsType = "WINDOWS"
	OsTypeOTHER   OsType = "OTHER"
)

func (e *OsType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OsType(s)
	case string:
		*e = OsType(s)
	default:
		return fmt.Errorf("unsupported scan type for OsType: %T", src)
	}
	return nil
}

type NullOsType struct {
	OsType OsType
	Valid  bool // Valid is true if OsType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOsType) Scan(value interface{}) error {
	if value == nil {
		ns.OsType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OsType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOsType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OsType), nil
}

type PowerSourceType string

const (
	PowerSourceTypeGRID                PowerSourceType = "GRID"
	PowerSourceTypeGRIDHYBRID          PowerSourceType = "GRID_HYBRID"
	PowerSourceTypeGRIDRENEWABLE       PowerSourceType = "GRID_RENEWABLE"
	PowerSourceTypeGENERATORWIND       PowerSourceType = "GENERATOR_WIND"
	PowerSourceTypeGENERATORSOLAR      PowerSourceType = "GENERATOR_SOLAR"
	PowerSourceTypeGENERATORNATURALGAS PowerSourceType = "GENERATOR_NATURAL_GAS"
	PowerSourceTypeBATTERY             PowerSourceType = "BATTERY"
	PowerSourceTypeBATTERYGRAPHENE     PowerSourceType = "BATTERY_GRAPHENE"
	PowerSourceTypeBATTERYLITHIUM      PowerSourceType = "BATTERY_LITHIUM"
	PowerSourceTypeOTHER               PowerSourceType = "OTHER"
)

func (e *PowerSourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PowerSourceType(s)
	case string:
		*e = PowerSourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for PowerSourceType: %T", src)
	}
	return nil
}

type NullPowerSourceType struct {
	PowerSourceType PowerSourceType
	Valid           bool // Valid is true if PowerSourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPowerSourceType) Scan(value interface{}) error {
	if value == nil {
		ns.PowerSourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PowerSourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPowerSourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PowerSourceType), nil
}

type Account struct {
	ID          int64
	Tag         pgtype.UUID
	AccountType AccountType
	Name        string
	Email       string
	Password    pgtype.Text
	Data        []byte
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	DeletedAt   pgtype.Timestamp
}

type EmployeeAccount struct {
	ID        int64
	Tag       pgtype.UUID
	Data      []byte
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
	AccountID int64
}

type Machine struct {
	ID               int64
	Tag              pgtype.UUID
	OsType           OsType
	OsVersion        string
	GpuConfiguration GpuConfiguration
	Name             string
	Description      string
	RamMb            int32
	CpuMhz           int32
	CpuCores         int32
	InternetMbps     int32
	Docker           bool
	DockerSecure     bool
	LastActive       pgtype.Timestamp
	LastPublicIp     *netip.Addr
	LastPrivateIp    *netip.Addr
	Data             []byte
	CreatedAt        pgtype.Timestamp
	UpdatedAt        pgtype.Timestamp
	DeletedAt        pgtype.Timestamp
	ContactID        int64
	MachineClusterID int64
}

type MachineCluster struct {
	ID            int64
	Tag           pgtype.UUID
	Name          string
	Description   string
	Data          []byte
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
	DeletedAt     pgtype.Timestamp
	ContactID     int64
	BillingID     int64
	ProfitShareID int64
}

type MachineTask struct {
	ID               int64
	Tag              pgtype.UUID
	TaskType         MachineTaskType
	Name             string
	Description      string
	Priority         int32
	Price            pgtype.Numeric
	Income           pgtype.Numeric
	Data             []byte
	CreatedAt        pgtype.Timestamp
	UpdatedAt        pgtype.Timestamp
	DeletedAt        pgtype.Timestamp
	MachineClusterID int64
}

type MachineTaskExecution struct {
	ID            int64
	Tag           pgtype.UUID
	Data          []byte
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
	DeletedAt     pgtype.Timestamp
	MachineTaskID int64
	MachineID     int64
}

type PowerDistributionSource struct {
	ID                        int64
	PowerDistributionSystemID int64
	PowerSourceID             int64
	Priority                  int32
	CreatedAt                 pgtype.Timestamp
	UpdatedAt                 pgtype.Timestamp
	DeletedAt                 pgtype.Timestamp
}

type PowerDistributionSystem struct {
	ID                 int64
	Tag                pgtype.UUID
	Name               string
	Description        string
	TotalCapacityWatts int32
	IsHybrid           bool
	Data               []byte
	CreatedAt          pgtype.Timestamp
	UpdatedAt          pgtype.Timestamp
	DeletedAt          pgtype.Timestamp
}

type PowerSource struct {
	ID            int64
	Tag           pgtype.UUID
	Name          string
	Description   string
	SourceType    PowerSourceType
	CapacityWatts int32
	Data          []byte
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
	DeletedAt     pgtype.Timestamp
}

type SimpleLlm struct {
	ID               int64
	Tag              pgtype.UUID
	Name             string
	Description      string
	GpuConfiguration GpuConfiguration
	CreatedAt        pgtype.Timestamp
	UpdatedAt        pgtype.Timestamp
	DeletedAt        pgtype.Timestamp
}

type Tenant struct {
	ID          int64
	Tag         pgtype.UUID
	Name        string
	Description string
	Data        []byte
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	DeletedAt   pgtype.Timestamp
}

type TenantMember struct {
	ID        int64
	Tag       pgtype.UUID
	Data      []byte
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
	TenantID  int64
	AccountID int64
}

type TenantMemberRole struct {
	ID        int64
	Tag       pgtype.UUID
	Data      []byte
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
	TenantID  int64
	AccountID int64
	RoleID    int64
}

type TenantRole struct {
	ID        int64
	Tag       pgtype.UUID
	Name      string
	Policy    []byte
	Data      []byte
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
	TenantID  int64
	CreatorID int64
}

type Workspace struct {
	ID        int64
	Tag       pgtype.UUID
	Name      string
	Data      []byte
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
	TenantID  int64
	OwnerID   int64
}

type WorkspaceMember struct {
	ID          int64
	Tag         pgtype.UUID
	Data        []byte
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	DeletedAt   pgtype.Timestamp
	GranterID   int64
	WorkspaceID int64
	AccountID   int64
}
