# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.28.0
import dataclasses
import datetime
import decimal
import enum
from typing import Any, Optional
import uuid


class AccountType(str, enum.Enum):
    EMPLOYEE = "EMPLOYEE"
    FINANCIAL = "FINANCIAL"
    CUSTOMER = "CUSTOMER"
    SUPPLIER = "SUPPLIER"
    OTHER = "OTHER"


class GpuConfiguration(str, enum.Enum):
    RTX4090X1 = "RTX4090x1"
    RTX4090X2 = "RTX4090x2"
    RTX4090X4 = "RTX4090x4"
    RTX4090X8 = "RTX4090x8"
    RTX4090X16 = "RTX4090x16"
    A100X1 = "A100x1"
    A100X2 = "A100x2"
    A100X4 = "A100x4"
    A100X8 = "A100x8"
    A100X16 = "A100x16"
    H100X1 = "H100x1"
    H100X2 = "H100x2"
    H100X4 = "H100x4"
    H100X8 = "H100x8"
    H100X16 = "H100x16"
    NONE = "NONE"


class MachineTaskType(str, enum.Enum):
    SCRIPT = "SCRIPT"
    PYTHON = "PYTHON"
    CONTAINER = "CONTAINER"
    CLOUD_MANAGED_AI = "CLOUD_MANAGED_AI"
    CLOUD_CONTAINER = "CLOUD_CONTAINER"
    THIRD_PARTY_SERVICE = "THIRD_PARTY_SERVICE"
    CRYPTO_MINING = "CRYPTO_MINING"
    OTHER = "OTHER"


class OsType(str, enum.Enum):
    LINUX = "LINUX"
    WINDOWS = "WINDOWS"
    OTHER = "OTHER"


class PowerSourceType(str, enum.Enum):
    GRID = "GRID"
    GRID_HYBRID = "GRID_HYBRID"
    GRID_RENEWABLE = "GRID_RENEWABLE"
    GENERATOR_WIND = "GENERATOR_WIND"
    GENERATOR_SOLAR = "GENERATOR_SOLAR"
    GENERATOR_NATURAL_GAS = "GENERATOR_NATURAL_GAS"
    BATTERY = "BATTERY"
    BATTERY_GRAPHENE = "BATTERY_GRAPHENE"
    BATTERY_LITHIUM = "BATTERY_LITHIUM"
    OTHER = "OTHER"


@dataclasses.dataclass()
class Account:
    id: int
    tag: uuid.UUID
    account_type: AccountType
    name: str
    email: str
    password: Optional[str]
    data: Any
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]


@dataclasses.dataclass()
class EmployeeAccount:
    id: int
    tag: uuid.UUID
    data: Any
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    account_id: int


@dataclasses.dataclass()
class Machine:
    id: int
    tag: uuid.UUID
    os_type: OsType
    os_version: str
    gpu_configuration: GpuConfiguration
    name: str
    description: str
    ram_mb: int
    cpu_mhz: int
    cpu_cores: int
    internet_mbps: int
    docker: bool
    docker_secure: bool
    last_active: Optional[datetime.datetime]
    last_public_ip: Optional[str]
    last_private_ip: Optional[str]
    data: Any
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    contact_id: int
    machine_cluster_id: int


@dataclasses.dataclass()
class MachineCluster:
    id: int
    tag: uuid.UUID
    name: str
    description: str
    data: Any
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    contact_id: int
    billing_id: int
    profit_share_id: int


@dataclasses.dataclass()
class MachineTask:
    id: int
    tag: uuid.UUID
    task_type: MachineTaskType
    name: str
    description: str
    priority: int
    price: decimal.Decimal
    income: decimal.Decimal
    data: Any
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    machine_cluster_id: int


@dataclasses.dataclass()
class MachineTaskExecution:
    id: int
    tag: uuid.UUID
    data: Any
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    machine_task_id: int
    machine_id: int


@dataclasses.dataclass()
class PowerDistributionSource:
    id: int
    power_distribution_system_id: int
    power_source_id: int
    priority: int
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]


@dataclasses.dataclass()
class PowerDistributionSystem:
    id: int
    tag: uuid.UUID
    name: str
    description: str
    total_capacity_watts: int
    is_hybrid: bool
    data: Any
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]


@dataclasses.dataclass()
class PowerSource:
    id: int
    tag: uuid.UUID
    name: str
    description: str
    source_type: PowerSourceType
    capacity_watts: int
    data: Any
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]


@dataclasses.dataclass()
class SimpleLlm:
    id: int
    tag: uuid.UUID
    name: str
    description: str
    gpu_configuration: GpuConfiguration
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]


@dataclasses.dataclass()
class Tenant:
    id: int
    tag: uuid.UUID
    name: str
    description: str
    data: Any
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]


@dataclasses.dataclass()
class TenantMember:
    id: int
    tag: uuid.UUID
    data: Any
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    tenant_id: int
    account_id: int


@dataclasses.dataclass()
class TenantMemberRole:
    id: int
    tag: uuid.UUID
    data: Any
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    tenant_id: int
    account_id: int
    role_id: int


@dataclasses.dataclass()
class TenantRole:
    id: int
    tag: uuid.UUID
    name: str
    policy: Any
    data: Any
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    tenant_id: int
    creator_id: int


@dataclasses.dataclass()
class Workspace:
    id: int
    tag: uuid.UUID
    name: str
    data: Any
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    tenant_id: int
    owner_id: int


@dataclasses.dataclass()
class WorkspaceMember:
    id: int
    tag: uuid.UUID
    data: Any
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deleted_at: Optional[datetime.datetime]
    granter_id: int
    workspace_id: int
    account_id: int
