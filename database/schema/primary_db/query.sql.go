// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package primary_db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO account (
	account_type,
	name,
	email,
	password
) VALUES (
	$1,
	$2,
	$3,
	$4
)
RETURNING id, tag, account_type, name, email, password, data, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	AccountType AccountType
	Name        string
	Email       string
	Password    pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Account, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.AccountType,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Tag,
		&i.AccountType,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTenant = `-- name: GetTenant :one
SELECT id, tag, name, description, data, created_at, updated_at, deleted_at FROM tenant
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTenant(ctx context.Context, id int64) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenant, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Tag,
		&i.Name,
		&i.Description,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, tag, account_type, name, email, password, data, created_at, updated_at, deleted_at
FROM account
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Tag,
		&i.AccountType,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByTag = `-- name: GetUserByTag :one
SELECT id, tag, account_type, name, email, password, data, created_at, updated_at, deleted_at
FROM account
WHERE tag = $1
LIMIT 1
`

func (q *Queries) GetUserByTag(ctx context.Context, tag pgtype.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getUserByTag, tag)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Tag,
		&i.AccountType,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listTenants = `-- name: ListTenants :many
SELECT id, tag, name, description, data, created_at, updated_at, deleted_at FROM tenant
ORDER BY name
`

func (q *Queries) ListTenants(ctx context.Context) ([]Tenant, error) {
	rows, err := q.db.Query(ctx, listTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tenant
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.Tag,
			&i.Name,
			&i.Description,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenant = `-- name: UpdateTenant :exec


DELETE FROM tenant
WHERE id = $1
`

// -- name: CreateTenant :one
// INSERT INTO tenant (
//
//	name, bio
//
// ) VALUES (
//
//	$1, $2
//
// )
// RETURNING *;
// UPDATE tenant
//
//	set name = $2,
//	bio = $3
//
// WHERE id = $1;
func (q *Queries) UpdateTenant(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateTenant, id)
	return err
}
